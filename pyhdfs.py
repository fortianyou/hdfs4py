# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyhdfs', [dirname(__file__)])
        except ImportError:
            import _pyhdfs
            return _pyhdfs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyhdfs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyhdfs = swig_import_helper()
    del swig_import_helper
else:
    import _pyhdfs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


kObjectKindFile = _pyhdfs.kObjectKindFile
kObjectKindDirectory = _pyhdfs.kObjectKindDirectory

def hdfsFileIsOpenForRead(*args):
  return _pyhdfs.hdfsFileIsOpenForRead(*args)
hdfsFileIsOpenForRead = _pyhdfs.hdfsFileIsOpenForRead

def hdfsFileIsOpenForWrite(*args):
  return _pyhdfs.hdfsFileIsOpenForWrite(*args)
hdfsFileIsOpenForWrite = _pyhdfs.hdfsFileIsOpenForWrite
class hdfsReadStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hdfsReadStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hdfsReadStatistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalBytesRead"] = _pyhdfs.hdfsReadStatistics_totalBytesRead_set
    __swig_getmethods__["totalBytesRead"] = _pyhdfs.hdfsReadStatistics_totalBytesRead_get
    if _newclass:totalBytesRead = _swig_property(_pyhdfs.hdfsReadStatistics_totalBytesRead_get, _pyhdfs.hdfsReadStatistics_totalBytesRead_set)
    __swig_setmethods__["totalLocalBytesRead"] = _pyhdfs.hdfsReadStatistics_totalLocalBytesRead_set
    __swig_getmethods__["totalLocalBytesRead"] = _pyhdfs.hdfsReadStatistics_totalLocalBytesRead_get
    if _newclass:totalLocalBytesRead = _swig_property(_pyhdfs.hdfsReadStatistics_totalLocalBytesRead_get, _pyhdfs.hdfsReadStatistics_totalLocalBytesRead_set)
    __swig_setmethods__["totalShortCircuitBytesRead"] = _pyhdfs.hdfsReadStatistics_totalShortCircuitBytesRead_set
    __swig_getmethods__["totalShortCircuitBytesRead"] = _pyhdfs.hdfsReadStatistics_totalShortCircuitBytesRead_get
    if _newclass:totalShortCircuitBytesRead = _swig_property(_pyhdfs.hdfsReadStatistics_totalShortCircuitBytesRead_get, _pyhdfs.hdfsReadStatistics_totalShortCircuitBytesRead_set)
    __swig_setmethods__["totalZeroCopyBytesRead"] = _pyhdfs.hdfsReadStatistics_totalZeroCopyBytesRead_set
    __swig_getmethods__["totalZeroCopyBytesRead"] = _pyhdfs.hdfsReadStatistics_totalZeroCopyBytesRead_get
    if _newclass:totalZeroCopyBytesRead = _swig_property(_pyhdfs.hdfsReadStatistics_totalZeroCopyBytesRead_get, _pyhdfs.hdfsReadStatistics_totalZeroCopyBytesRead_set)
    def __init__(self): 
        this = _pyhdfs.new_hdfsReadStatistics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyhdfs.delete_hdfsReadStatistics
    __del__ = lambda self : None;
hdfsReadStatistics_swigregister = _pyhdfs.hdfsReadStatistics_swigregister
hdfsReadStatistics_swigregister(hdfsReadStatistics)


def hdfsFileGetReadStatistics(*args):
  return _pyhdfs.hdfsFileGetReadStatistics(*args)
hdfsFileGetReadStatistics = _pyhdfs.hdfsFileGetReadStatistics

def hdfsReadStatisticsGetRemoteBytesRead(*args):
  return _pyhdfs.hdfsReadStatisticsGetRemoteBytesRead(*args)
hdfsReadStatisticsGetRemoteBytesRead = _pyhdfs.hdfsReadStatisticsGetRemoteBytesRead

def hdfsFileClearReadStatistics(*args):
  return _pyhdfs.hdfsFileClearReadStatistics(*args)
hdfsFileClearReadStatistics = _pyhdfs.hdfsFileClearReadStatistics

def hdfsFileFreeReadStatistics(*args):
  return _pyhdfs.hdfsFileFreeReadStatistics(*args)
hdfsFileFreeReadStatistics = _pyhdfs.hdfsFileFreeReadStatistics

def hdfsConnectAsUser(*args):
  return _pyhdfs.hdfsConnectAsUser(*args)
hdfsConnectAsUser = _pyhdfs.hdfsConnectAsUser

def hdfsConnect(*args):
  return _pyhdfs.hdfsConnect(*args)
hdfsConnect = _pyhdfs.hdfsConnect

def hdfsConnectAsUserNewInstance(*args):
  return _pyhdfs.hdfsConnectAsUserNewInstance(*args)
hdfsConnectAsUserNewInstance = _pyhdfs.hdfsConnectAsUserNewInstance

def hdfsConnectNewInstance(*args):
  return _pyhdfs.hdfsConnectNewInstance(*args)
hdfsConnectNewInstance = _pyhdfs.hdfsConnectNewInstance

def hdfsBuilderConnect(*args):
  return _pyhdfs.hdfsBuilderConnect(*args)
hdfsBuilderConnect = _pyhdfs.hdfsBuilderConnect

def hdfsNewBuilder():
  return _pyhdfs.hdfsNewBuilder()
hdfsNewBuilder = _pyhdfs.hdfsNewBuilder

def hdfsBuilderSetForceNewInstance(*args):
  return _pyhdfs.hdfsBuilderSetForceNewInstance(*args)
hdfsBuilderSetForceNewInstance = _pyhdfs.hdfsBuilderSetForceNewInstance

def hdfsBuilderSetNameNode(*args):
  return _pyhdfs.hdfsBuilderSetNameNode(*args)
hdfsBuilderSetNameNode = _pyhdfs.hdfsBuilderSetNameNode

def hdfsBuilderSetNameNodePort(*args):
  return _pyhdfs.hdfsBuilderSetNameNodePort(*args)
hdfsBuilderSetNameNodePort = _pyhdfs.hdfsBuilderSetNameNodePort

def hdfsBuilderSetUserName(*args):
  return _pyhdfs.hdfsBuilderSetUserName(*args)
hdfsBuilderSetUserName = _pyhdfs.hdfsBuilderSetUserName

def hdfsBuilderSetKerbTicketCachePath(*args):
  return _pyhdfs.hdfsBuilderSetKerbTicketCachePath(*args)
hdfsBuilderSetKerbTicketCachePath = _pyhdfs.hdfsBuilderSetKerbTicketCachePath

def hdfsFreeBuilder(*args):
  return _pyhdfs.hdfsFreeBuilder(*args)
hdfsFreeBuilder = _pyhdfs.hdfsFreeBuilder

def hdfsBuilderConfSetStr(*args):
  return _pyhdfs.hdfsBuilderConfSetStr(*args)
hdfsBuilderConfSetStr = _pyhdfs.hdfsBuilderConfSetStr

def hdfsConfGetStr(*args):
  return _pyhdfs.hdfsConfGetStr(*args)
hdfsConfGetStr = _pyhdfs.hdfsConfGetStr

def hdfsConfGetInt(*args):
  return _pyhdfs.hdfsConfGetInt(*args)
hdfsConfGetInt = _pyhdfs.hdfsConfGetInt

def hdfsConfStrFree(*args):
  return _pyhdfs.hdfsConfStrFree(*args)
hdfsConfStrFree = _pyhdfs.hdfsConfStrFree

def hdfsDisconnect(*args):
  return _pyhdfs.hdfsDisconnect(*args)
hdfsDisconnect = _pyhdfs.hdfsDisconnect

def hdfsOpenFile(*args):
  return _pyhdfs.hdfsOpenFile(*args)
hdfsOpenFile = _pyhdfs.hdfsOpenFile

def hdfsUnbufferFile(*args):
  return _pyhdfs.hdfsUnbufferFile(*args)
hdfsUnbufferFile = _pyhdfs.hdfsUnbufferFile

def hdfsCloseFile(*args):
  return _pyhdfs.hdfsCloseFile(*args)
hdfsCloseFile = _pyhdfs.hdfsCloseFile

def hdfsExists(*args):
  return _pyhdfs.hdfsExists(*args)
hdfsExists = _pyhdfs.hdfsExists

def hdfsSeek(*args):
  return _pyhdfs.hdfsSeek(*args)
hdfsSeek = _pyhdfs.hdfsSeek

def hdfsTell(*args):
  return _pyhdfs.hdfsTell(*args)
hdfsTell = _pyhdfs.hdfsTell

def hdfsRead(*args):
  return _pyhdfs.hdfsRead(*args)
hdfsRead = _pyhdfs.hdfsRead

def hdfsPread(*args):
  return _pyhdfs.hdfsPread(*args)
hdfsPread = _pyhdfs.hdfsPread

def hdfsWrite(*args):
  return _pyhdfs.hdfsWrite(*args)
hdfsWrite = _pyhdfs.hdfsWrite

def hdfsFlush(*args):
  return _pyhdfs.hdfsFlush(*args)
hdfsFlush = _pyhdfs.hdfsFlush

def hdfsHFlush(*args):
  return _pyhdfs.hdfsHFlush(*args)
hdfsHFlush = _pyhdfs.hdfsHFlush

def hdfsHSync(*args):
  return _pyhdfs.hdfsHSync(*args)
hdfsHSync = _pyhdfs.hdfsHSync

def hdfsAvailable(*args):
  return _pyhdfs.hdfsAvailable(*args)
hdfsAvailable = _pyhdfs.hdfsAvailable

def hdfsCopy(*args):
  return _pyhdfs.hdfsCopy(*args)
hdfsCopy = _pyhdfs.hdfsCopy

def hdfsMove(*args):
  return _pyhdfs.hdfsMove(*args)
hdfsMove = _pyhdfs.hdfsMove

def hdfsDelete(*args):
  return _pyhdfs.hdfsDelete(*args)
hdfsDelete = _pyhdfs.hdfsDelete

def hdfsRename(*args):
  return _pyhdfs.hdfsRename(*args)
hdfsRename = _pyhdfs.hdfsRename

def hdfsGetWorkingDirectory(*args):
  return _pyhdfs.hdfsGetWorkingDirectory(*args)
hdfsGetWorkingDirectory = _pyhdfs.hdfsGetWorkingDirectory

def hdfsSetWorkingDirectory(*args):
  return _pyhdfs.hdfsSetWorkingDirectory(*args)
hdfsSetWorkingDirectory = _pyhdfs.hdfsSetWorkingDirectory

def hdfsCreateDirectory(*args):
  return _pyhdfs.hdfsCreateDirectory(*args)
hdfsCreateDirectory = _pyhdfs.hdfsCreateDirectory

def hdfsSetReplication(*args):
  return _pyhdfs.hdfsSetReplication(*args)
hdfsSetReplication = _pyhdfs.hdfsSetReplication
class hdfsFileInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hdfsFileInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hdfsFileInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mKind"] = _pyhdfs.hdfsFileInfo_mKind_set
    __swig_getmethods__["mKind"] = _pyhdfs.hdfsFileInfo_mKind_get
    if _newclass:mKind = _swig_property(_pyhdfs.hdfsFileInfo_mKind_get, _pyhdfs.hdfsFileInfo_mKind_set)
    __swig_setmethods__["mName"] = _pyhdfs.hdfsFileInfo_mName_set
    __swig_getmethods__["mName"] = _pyhdfs.hdfsFileInfo_mName_get
    if _newclass:mName = _swig_property(_pyhdfs.hdfsFileInfo_mName_get, _pyhdfs.hdfsFileInfo_mName_set)
    __swig_setmethods__["mLastMod"] = _pyhdfs.hdfsFileInfo_mLastMod_set
    __swig_getmethods__["mLastMod"] = _pyhdfs.hdfsFileInfo_mLastMod_get
    if _newclass:mLastMod = _swig_property(_pyhdfs.hdfsFileInfo_mLastMod_get, _pyhdfs.hdfsFileInfo_mLastMod_set)
    __swig_setmethods__["mSize"] = _pyhdfs.hdfsFileInfo_mSize_set
    __swig_getmethods__["mSize"] = _pyhdfs.hdfsFileInfo_mSize_get
    if _newclass:mSize = _swig_property(_pyhdfs.hdfsFileInfo_mSize_get, _pyhdfs.hdfsFileInfo_mSize_set)
    __swig_setmethods__["mReplication"] = _pyhdfs.hdfsFileInfo_mReplication_set
    __swig_getmethods__["mReplication"] = _pyhdfs.hdfsFileInfo_mReplication_get
    if _newclass:mReplication = _swig_property(_pyhdfs.hdfsFileInfo_mReplication_get, _pyhdfs.hdfsFileInfo_mReplication_set)
    __swig_setmethods__["mBlockSize"] = _pyhdfs.hdfsFileInfo_mBlockSize_set
    __swig_getmethods__["mBlockSize"] = _pyhdfs.hdfsFileInfo_mBlockSize_get
    if _newclass:mBlockSize = _swig_property(_pyhdfs.hdfsFileInfo_mBlockSize_get, _pyhdfs.hdfsFileInfo_mBlockSize_set)
    __swig_setmethods__["mOwner"] = _pyhdfs.hdfsFileInfo_mOwner_set
    __swig_getmethods__["mOwner"] = _pyhdfs.hdfsFileInfo_mOwner_get
    if _newclass:mOwner = _swig_property(_pyhdfs.hdfsFileInfo_mOwner_get, _pyhdfs.hdfsFileInfo_mOwner_set)
    __swig_setmethods__["mGroup"] = _pyhdfs.hdfsFileInfo_mGroup_set
    __swig_getmethods__["mGroup"] = _pyhdfs.hdfsFileInfo_mGroup_get
    if _newclass:mGroup = _swig_property(_pyhdfs.hdfsFileInfo_mGroup_get, _pyhdfs.hdfsFileInfo_mGroup_set)
    __swig_setmethods__["mPermissions"] = _pyhdfs.hdfsFileInfo_mPermissions_set
    __swig_getmethods__["mPermissions"] = _pyhdfs.hdfsFileInfo_mPermissions_get
    if _newclass:mPermissions = _swig_property(_pyhdfs.hdfsFileInfo_mPermissions_get, _pyhdfs.hdfsFileInfo_mPermissions_set)
    __swig_setmethods__["mLastAccess"] = _pyhdfs.hdfsFileInfo_mLastAccess_set
    __swig_getmethods__["mLastAccess"] = _pyhdfs.hdfsFileInfo_mLastAccess_get
    if _newclass:mLastAccess = _swig_property(_pyhdfs.hdfsFileInfo_mLastAccess_get, _pyhdfs.hdfsFileInfo_mLastAccess_set)
    def __init__(self): 
        this = _pyhdfs.new_hdfsFileInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyhdfs.delete_hdfsFileInfo
    __del__ = lambda self : None;
hdfsFileInfo_swigregister = _pyhdfs.hdfsFileInfo_swigregister
hdfsFileInfo_swigregister(hdfsFileInfo)


def hdfsListDirectory(*args):
  return _pyhdfs.hdfsListDirectory(*args)
hdfsListDirectory = _pyhdfs.hdfsListDirectory

def hdfsGetPathInfo(*args):
  return _pyhdfs.hdfsGetPathInfo(*args)
hdfsGetPathInfo = _pyhdfs.hdfsGetPathInfo

def hdfsFreeFileInfo(*args):
  return _pyhdfs.hdfsFreeFileInfo(*args)
hdfsFreeFileInfo = _pyhdfs.hdfsFreeFileInfo

def hdfsFileIsEncrypted(*args):
  return _pyhdfs.hdfsFileIsEncrypted(*args)
hdfsFileIsEncrypted = _pyhdfs.hdfsFileIsEncrypted

def hdfsGetHosts(*args):
  return _pyhdfs.hdfsGetHosts(*args)
hdfsGetHosts = _pyhdfs.hdfsGetHosts

def hdfsFreeHosts(*args):
  return _pyhdfs.hdfsFreeHosts(*args)
hdfsFreeHosts = _pyhdfs.hdfsFreeHosts

def hdfsGetDefaultBlockSize(*args):
  return _pyhdfs.hdfsGetDefaultBlockSize(*args)
hdfsGetDefaultBlockSize = _pyhdfs.hdfsGetDefaultBlockSize

def hdfsGetDefaultBlockSizeAtPath(*args):
  return _pyhdfs.hdfsGetDefaultBlockSizeAtPath(*args)
hdfsGetDefaultBlockSizeAtPath = _pyhdfs.hdfsGetDefaultBlockSizeAtPath

def hdfsGetCapacity(*args):
  return _pyhdfs.hdfsGetCapacity(*args)
hdfsGetCapacity = _pyhdfs.hdfsGetCapacity

def hdfsGetUsed(*args):
  return _pyhdfs.hdfsGetUsed(*args)
hdfsGetUsed = _pyhdfs.hdfsGetUsed

def hdfsChown(*args):
  return _pyhdfs.hdfsChown(*args)
hdfsChown = _pyhdfs.hdfsChown

def hdfsChmod(*args):
  return _pyhdfs.hdfsChmod(*args)
hdfsChmod = _pyhdfs.hdfsChmod

def hdfsUtime(*args):
  return _pyhdfs.hdfsUtime(*args)
hdfsUtime = _pyhdfs.hdfsUtime

def hadoopRzOptionsAlloc():
  return _pyhdfs.hadoopRzOptionsAlloc()
hadoopRzOptionsAlloc = _pyhdfs.hadoopRzOptionsAlloc

def hadoopRzOptionsSetSkipChecksum(*args):
  return _pyhdfs.hadoopRzOptionsSetSkipChecksum(*args)
hadoopRzOptionsSetSkipChecksum = _pyhdfs.hadoopRzOptionsSetSkipChecksum

def hadoopRzOptionsSetByteBufferPool(*args):
  return _pyhdfs.hadoopRzOptionsSetByteBufferPool(*args)
hadoopRzOptionsSetByteBufferPool = _pyhdfs.hadoopRzOptionsSetByteBufferPool

def hadoopRzOptionsFree(*args):
  return _pyhdfs.hadoopRzOptionsFree(*args)
hadoopRzOptionsFree = _pyhdfs.hadoopRzOptionsFree

def hadoopReadZero(*args):
  return _pyhdfs.hadoopReadZero(*args)
hadoopReadZero = _pyhdfs.hadoopReadZero

def hadoopRzBufferLength(*args):
  return _pyhdfs.hadoopRzBufferLength(*args)
hadoopRzBufferLength = _pyhdfs.hadoopRzBufferLength

def hadoopRzBufferGet(*args):
  return _pyhdfs.hadoopRzBufferGet(*args)
hadoopRzBufferGet = _pyhdfs.hadoopRzBufferGet

def hadoopRzBufferFree(*args):
  return _pyhdfs.hadoopRzBufferFree(*args)
hadoopRzBufferFree = _pyhdfs.hadoopRzBufferFree
O_RDONLY = _pyhdfs.O_RDONLY
O_WRONLY = _pyhdfs.O_WRONLY
O_RDWR = _pyhdfs.O_RDWR
O_APPEND = _pyhdfs.O_APPEND
O_CREAT = _pyhdfs.O_CREAT
# This file is compatible with both classic and new-style classes.


